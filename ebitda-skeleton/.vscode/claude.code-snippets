{
  "Claude Architecture Request": {
    "prefix": "claude-arch",
    "body": [
      "Design a ${1:system} architecture for the EBITDA game:",
      "",
      "Requirements:",
      "- ${2:requirement1}",
      "- ${3:requirement2}",
      "- Performance: ${4:60 FPS with 10k entities}",
      "- Deterministic: Must be reproducible from seed",
      "",
      "Current context:",
      "- Tech stack: TypeScript/React, Rust WASM, Go backend",
      "- State management: Zustand with event sourcing",
      "- Build: Vite",
      "",
      "Provide:",
      "1. High-level architecture diagram (ASCII or description)",
      "2. Key interfaces and types",
      "3. Data flow description",
      "4. Performance analysis",
      "5. Implementation approach",
      "",
      "$0"
    ],
    "description": "Request architecture design from Claude"
  },
  
  "Claude Code Review": {
    "prefix": "claude-review",
    "body": [
      "Review this EBITDA game code for:",
      "- Performance (must maintain 60 FPS)",
      "- Memory leaks",
      "- Determinism issues",
      "- Security vulnerabilities",
      "- Best practices",
      "",
      "```typescript",
      "${TM_SELECTED_TEXT}$1",
      "```",
      "",
      "Specific concerns:",
      "- ${2:concern}",
      "",
      "$0"
    ],
    "description": "Request code review from Claude"
  },
  
  "Claude Optimize": {
    "prefix": "claude-optimize",
    "body": [
      "Optimize this code for the EBITDA game:",
      "",
      "Current performance: ${1:metric}",
      "Target: ${2:60 FPS with 10k entities}",
      "",
      "```typescript",
      "${TM_SELECTED_TEXT}$3",
      "```",
      "",
      "Constraints:",
      "- Must remain deterministic",
      "- Maintain readability",
      "- No external dependencies",
      "",
      "$0"
    ],
    "description": "Request performance optimization from Claude"
  },
  
  "Claude Test Generation": {
    "prefix": "claude-test",
    "body": [
      "Generate comprehensive tests for this EBITDA game code:",
      "",
      "```typescript",
      "${TM_SELECTED_TEXT}$1",
      "```",
      "",
      "Include:",
      "- Unit tests for all functions",
      "- Edge case coverage",
      "- Determinism verification",
      "- Performance benchmarks",
      "- Property-based tests where applicable",
      "",
      "Use Jest and follow TypeScript best practices.",
      "",
      "$0"
    ],
    "description": "Request test generation from Claude"
  },
  
  "Claude Bug Fix": {
    "prefix": "claude-bug",
    "body": [
      "Help debug this issue in the EBITDA game:",
      "",
      "Error: ${1:error message}",
      "",
      "Code:",
      "```typescript",
      "${TM_SELECTED_TEXT}$2",
      "```",
      "",
      "What I've tried:",
      "1. ${3:attempt1}",
      "",
      "Stack trace:",
      "```",
      "${4:stack}",
      "```",
      "",
      "Find root cause and provide fix.",
      "",
      "$0"
    ],
    "description": "Request bug fix from Claude"
  },
  
  "Claude Implementation": {
    "prefix": "claude-impl",
    "body": [
      "Implement ${1:feature} for the EBITDA game:",
      "",
      "Requirements:",
      "- ${2:requirement1}",
      "- ${3:requirement2}",
      "",
      "Constraints:",
      "- Max ${4:200} lines",
      "- Must be deterministic",
      "- Performance: O(${5:n})",
      "- Memory: < ${6:100}MB",
      "",
      "Integrate with:",
      "- Existing types in types.ts",
      "- Zustand store",
      "- Event system",
      "",
      "$0"
    ],
    "description": "Request implementation from Claude"
  },
  
  "Claude Refactor": {
    "prefix": "claude-refactor",
    "body": [
      "Refactor this EBITDA game code for better:",
      "- ${1|Performance,Maintainability,Testability,All|}",
      "",
      "```typescript",
      "${TM_SELECTED_TEXT}$2",
      "```",
      "",
      "Maintain:",
      "- Deterministic behavior",
      "- Existing API",
      "- Type safety",
      "",
      "$0"
    ],
    "description": "Request refactoring from Claude"
  },
  
  "EBITDA Component": {
    "prefix": "ebitda-component",
    "body": [
      "import React from 'react'",
      "import { useGame } from '../store/gameStore'",
      "",
      "interface ${1:ComponentName}Props {",
      "  ${2:prop}: ${3:type}",
      "}",
      "",
      "export const ${1:ComponentName}: React.FC<${1:ComponentName}Props> = ({ ${2:prop} }) => {",
      "  const state = useGame(s => s.state)",
      "  ",
      "  return (",
      "    <div>",
      "      $0",
      "    </div>",
      "  )",
      "}",
      "",
      "// Claude: Complete this component for [PURPOSE]"
    ],
    "description": "EBITDA React component template"
  },
  
  "EBITDA Engine Module": {
    "prefix": "ebitda-engine",
    "body": [
      "import { PRNG } from './prng'",
      "import type { ${1:Types} } from './types'",
      "",
      "export class ${2:ModuleName}Engine {",
      "  private prng: PRNG",
      "  ",
      "  constructor(seed: number) {",
      "    this.prng = new PRNG(seed)",
      "  }",
      "  ",
      "  ${3:methodName}(${4:params}): ${5:ReturnType} {",
      "    // Claude: Implement ${3} for ${6:purpose}",
      "    // Must be deterministic and performant",
      "    $0",
      "  }",
      "}"
    ],
    "description": "EBITDA engine module template"
  }
}